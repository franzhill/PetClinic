<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.example</groupId>
  <artifactId>petClinic-cascade-exercise</artifactId>
  <version>0.0.1-SNAPSHOT</version>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.2.5</version>
    <relativePath/>
  </parent>

  <properties>
    <java.version>17</java.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <!-- Lombok (avoids having to generate boilerplate code by autogenerating it)-->
      <!-- No need to specify version it is managed by the spring boot parent -->
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>
    <!-- To read the json file with owners and pets -->
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <!--<version>2.17.1</version> <!- - or latest stable -->
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>

      <!-- 
        Plugin: maven-resources-plugin
        Purpose: Allows copying specific files or folders during the build lifecycle.

        Here, we use it to copy our `logback-spring.yml` config file into the `test-classes` output directory 
        so that it is picked up when running integration or unit tests.
        
        This solves the following problem:
        - By default, Maven does NOT copy `src/main/resources` into `target/test-classes`.
        - So if you put `logback-spring.yml` in `src/main/resources`, it will NOT be visible to the Spring context 
          when running tests — only during normal app runs.
      -->
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.3.1</version>
        <executions>
          <execution>
            <id>copy-logback-spring</id>
            
            <!--  Phase during which this should be executed.
                  'process-test-resources' runs before tests are compiled or executed. -->
            <phase>process-test-resources</phase> 
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <!-- Copy to test-classes so Spring Boot picks it up during test context loading -->
              <outputDirectory>${project.build.testOutputDirectory}</outputDirectory>
              <resources>
                <resource>
                  <!-- Source: your main resources folder -->
                  <directory>src/main/resources</directory>
                  <includes>
                    <!-- Only copy the logging config file -->
                    <include>logback-spring.xml</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- 
        Plugin: maven-surefire-plugin
        Purpose: Controls how tests are executed during the Maven `test` phase.

        This plugin is responsible for launching your JUnit tests (unit or integration) from the command line 
        with `mvn test` or `mvn verify`. The configuration below aims to:

        - Ensure reliable and predictable test execution
        - Improve developer feedback loop with clearer console output
        - Prevent Maven from swallowing test logs (System.out or log.info)
        - Avoid unnecessary parallelism or weird stack trace truncation
        - Make test method names and @DisplayName annotations more visible in the terminal output

         This setup is ideal for Spring Boot projects using JUnit 5 and Logback
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.1.2</version> <!--  Use the latest stable version to support JUnit 5 and modern features -->
        <configuration>
          <!--  Ensures a clean, single forked JVM is used for running tests -->
          <forkCount>1</forkCount>
          <reuseForks>true</reuseForks>
          <!--  Print a short summary of tests in the console (e.g., number of tests run, passed, failed) -->
          <printSummary>true</printSummary>
          <!--  Show test output (e.g., System.out, log.info) directly in the console instead of redirecting it to a file -->
          <redirectTestOutputToFile>false</redirectTestOutputToFile>
          <!--  Prevents writing test results to a target/surefire-reports/TEST-*.txt file; enables real-time output to console -->
          <useFile>false</useFile>
          <!--  Keeps the full stack trace for errors (disable truncation) -->
          <trimStackTrace>false</trimStackTrace>
          <!--  Use 'brief' format to print only essential information (not per-method unless there's a failure) -->
          <reportFormat>plain</reportFormat>
          <!--  If a test fails, fail the build. Set to true if you want to continue even on failure -->
          <testFailureIgnore>false</testFailureIgnore>
          <!--  Explicitly disable parallel execution (unless you’ve configured it elsewhere) -->
          <systemPropertyVariables>
            <junit.jupiter.execution.parallel.enabled>false</junit.jupiter.execution.parallel.enabled>
          </systemPropertyVariables>
        </configuration>
      </plugin>



    </plugins>
  </build>
</project>
