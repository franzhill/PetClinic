# -------------------------------------------------
# ALL ENVs
# -------------------------------------------------

spring:
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password:
  jpa:
    # Logs every SQL query generated by Hibernate to the console.
    # Great for debugging or learning what Hibernate does under the hood,
    # but can clutter logs and slow down tests — disable in production or CI.
    show-sql: false

    hibernate:
      # Automatically create the schema from JPA entities on startup,
      # and drop it when the application context shuts down.
      # Ideal for integration testing with an in-memory database.
      ddl-auto: create-drop

      cache:
        # Enables the Hibernate second-level cache (L2), which stores entities
        # and collections between transactions — improving performance by avoiding repeated DB hits.
        use_second_level_cache: true

        # Enables the Hibernate query cache, which allows caching the results of HQL/JPQL queries.
        # Useful for stable read-heavy queries (e.g., "find all species").
        # Also recommended when using @NaturalIdCache, @Cacheable, or query caching (@QueryHints)
        use_query_cache: true

        region:
          # Specifies the factory class to manage cache regions.
          # This uses JSR-107 (JCache) as the standard API, which allows you to plug in different cache providers
          # like EhCache 3, Caffeine, Infinispan, etc., via a simple `META-INF/ehcache.xml` or equivalent config file.
          factory_class: org.hibernate.cache.jcache.JCacheRegionFactory

        # --- Reminder ---
        # Second-level caching only works if you:
        # - Include a JCache-compliant provider like EhCache or Caffeine
        # - Provide a config file (e.g. META-INF/ehcache.xml)
        # - Enable second-level cache in Hibernate as done above

  output:
    ansi:
      # Force color output (even if auto-detection fails),
      # so ANSI colors are always shown in console logs — useful in IDEs and CI tools.
      enabled: ALWAYS

server:
  port: 8081

logging:
  # Overrides settings from logback-spring.yaml
  level:
    root: INFO                   # Global log level
    com.fhi.pet_clinic: DEBUG    # Set DEBUG level for your application's main package
    org.hibernate.SQL: DEBUG     # Optional: log SQL statements
    #org.hibernate.type.descriptor.sql.BasicBinder: TRACE  # Optional: log SQL parameter bindings

  #pattern:
    # We'll be configuring the pattern through the logback config file.
    # Spring Boot supports a limited set of logging configuration directly via application.yaml 
    # and colour formatting, use of %file, %line, %M, %class (source info), multiple appenders etc.
    # are not part of them.


# Tune the method-level profilers that log Hibernate-related activity for service methods:
profiling:
  performance:
    enabled: true
    # Prefix log lines with this for easier reading:
    logLinePrefix: PROFILING (PERF) ---
  sql:
    enabled: true
    logLinePrefix: PROFILING (SQL) ---


---
# -------------------------------------------------
# ENV SPECIFIC
# -------------------------------------------------
# This block is activated only when the active profile is as specified

spring:
  config:
    activate:
      on-profile: local,dev,test
#  liquibase:
#    # We're using a Proxied Data source on these environments, and we don't want 
#    # liquibase to use it (generates dependency cycle between beans)
#    # so we're explicitly feeding it the original untouched DataSource.
#    # See DataSourceProxyConfig.java
#    data-source: liquibaseDataSource
  jpa:
    properties:
      hibernate:
        # Enable Hibernate's runtime statistics collection (e.g., number of queries executed,
        # entities loaded, cache usage, etc.), which can be accessed programmatically or logged.
        # This is useful for performance profiling during development and debugging.
        # WARNING: Should NOT be active in production due to potential performance overhead.
        generate_statistics: true
        # Format SQL statements in logs for easier reading (useful in dev/test only)
        hibernate.format_sql: true
logging:
  level:
    # Log SQL queries executed by Hibernate
    org.hibernate.SQL: INFO
    # Log parameter bindings in SQL statements (very verbose, useful for debugging)
    org.hibernate.type.descriptor.sql.BasicBinder: INFO
    # Log Hibernate's internal statistics (query count, entity fetches, etc.)
    org.hibernate.stat: DEBUG
